pip install flask flask-login flask-bcrypt pyotp
from flask import Flask, render_template, request, redirect, url_for, session
from flask_bcrypt import Bcrypt
import sqlite3
import pyotp

app = Flask(__name__)
app.secret_key = "super_secret_key"
bcrypt = Bcrypt(app)

# --- Database Setup ---
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    role TEXT NOT NULL,
                    mfa_secret TEXT NOT NULL
                )''')
    conn.commit()
    conn.close()

init_db()

# --- Helper Functions ---
def get_user(username):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=?", (username,))
    user = c.fetchone()
    conn.close()
    return user

def add_user(username, password, role):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    pw_hash = bcrypt.generate_password_hash(password).decode('utf-8')
    mfa_secret = pyotp.random_base32()  # for Google Authenticator
    try:
        c.execute("INSERT INTO users (username, password_hash, role, mfa_secret) VALUES (?, ?, ?, ?)",
                  (username, pw_hash, role, mfa_secret))
        conn.commit()
    except sqlite3.IntegrityError:
        pass
    conn.close()

# --- Create some demo users ---
add_user('alice', 'password123', 'student')
add_user('bob', 'password123', 'faculty')
add_user('admin', 'password123', 'admin')

# --- Routes ---

@app.route('/')
def home():
    if 'username' in session:
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = get_user(username)

        if user and bcrypt.check_password_hash(user[2], password):
            session['temp_user'] = username
            # MFA step
            return redirect(url_for('mfa'))
        else:
            return "Invalid username or password!"
    return render_template('login.html')

@app.route('/mfa', methods=['GET', 'POST'])
def mfa():
    if 'temp_user' not in session:
        return redirect(url_for('login'))

    user = get_user(session['temp_user'])
    totp = pyotp.TOTP(user[4])

    if request.method == 'POST':
        code = request.form['code']
        if totp.verify(code):
            session['username'] = user[1]
            session['role'] = user[3]
            session.pop('temp_user', None)
            return redirect(url_for('dashboard'))
        else:
            return "Invalid MFA code. Try again."
    # Show QR code URL for demo purposes
    otp_uri = totp.provisioning_uri(name=user[1], issuer_name="FlaskDemoApp")
    return render_template('mfa.html', otp_uri=otp_uri)

@app.route('/dashboard')
def dashboard():
    if 'username' not in session:
        return redirect(url_for('login'))

    role = session.get('role')
    if role == 'student':
        return render_template('dashboard_student.html', user=session['username'])
    elif role == 'faculty':
        return render_template('dashboard_faculty.html', user=session['username'])
    elif role == 'admin':
        return render_template('dashboard_admin.html', user=session['username'])
    else:
        return render_template('unauthorized.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
<h2>Login</h2>
<form method="POST">
  <input name="username" placeholder="Username" required><br>
  <input name="password" type="password" placeholder="Password" required><br>
  <button type="submit">Login</button>
</form>
<h2>Multi-Factor Authentication</h2>
<p>Scan this QR code in Google Authenticator:</p>
<p><a href="{{ otp_uri }}" target="_blank">{{ otp_uri }}</a></p>
<form method="POST">
  <input name="code" placeholder="Enter 6-digit code" required><br>
  <button type="submit">Verify</button>
</form>
<h2>Student Dashboard</h2>
<p>Welcome, {{ user }}!</p>
<a href="/logout">Logout</a>
<h2>Faculty Dashboard</h2>
<p>Welcome, {{ user }}!</p>
<a href="/logout">Logout</a>
<h2>Admin Dashboard</h2>
<p>Welcome, {{ user }}!</p>
<a href="/logout">Logout</a>
<h2>Unauthorized Access</h2>
<p>You are not allowed to view this page.</p>
<a href="/logout">Logout</a>
python app.py
